// Generated by gencpp from file demo_package/AddTwoIntsRequest.msg
// DO NOT EDIT!


#ifndef DEMO_PACKAGE_MESSAGE_ADDTWOINTSREQUEST_H
#define DEMO_PACKAGE_MESSAGE_ADDTWOINTSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo_package
{
template <class ContainerAllocator>
struct AddTwoIntsRequest_
{
  typedef AddTwoIntsRequest_<ContainerAllocator> Type;

  AddTwoIntsRequest_()
    : value1(0)
    , value2(0)  {
    }
  AddTwoIntsRequest_(const ContainerAllocator& _alloc)
    : value1(0)
    , value2(0)  {
  (void)_alloc;
    }



   typedef int64_t _value1_type;
  _value1_type value1;

   typedef int64_t _value2_type;
  _value2_type value2;





  typedef boost::shared_ptr< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddTwoIntsRequest_

typedef ::demo_package::AddTwoIntsRequest_<std::allocator<void> > AddTwoIntsRequest;

typedef boost::shared_ptr< ::demo_package::AddTwoIntsRequest > AddTwoIntsRequestPtr;
typedef boost::shared_ptr< ::demo_package::AddTwoIntsRequest const> AddTwoIntsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo_package::AddTwoIntsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo_package::AddTwoIntsRequest_<ContainerAllocator1> & lhs, const ::demo_package::AddTwoIntsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.value1 == rhs.value1 &&
    lhs.value2 == rhs.value2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo_package::AddTwoIntsRequest_<ContainerAllocator1> & lhs, const ::demo_package::AddTwoIntsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6befecad63ae35cfea4264ad6cc36c0e";
  }

  static const char* value(const ::demo_package::AddTwoIntsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6befecad63ae35cfULL;
  static const uint64_t static_value2 = 0xea4264ad6cc36c0eULL;
};

template<class ContainerAllocator>
struct DataType< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo_package/AddTwoIntsRequest";
  }

  static const char* value(const ::demo_package::AddTwoIntsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 value1 \n"
"int64 value2\n"
;
  }

  static const char* value(const ::demo_package::AddTwoIntsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value1);
      stream.next(m.value2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddTwoIntsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo_package::AddTwoIntsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo_package::AddTwoIntsRequest_<ContainerAllocator>& v)
  {
    s << indent << "value1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.value1);
    s << indent << "value2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.value2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO_PACKAGE_MESSAGE_ADDTWOINTSREQUEST_H
